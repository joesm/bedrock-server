---
#############################################################################
# Update Minecraft Game Service
#
# Invocation:
#   ansible-playbook -i hosts.cfg update-game.yml
#
# The LEVEL_NAME and SERVER_PORT environment variables are required
# and must be set prior to running this playbook.
#
# There are many other variables use to set options. Please see
# the "server.properties" file for a full list of optional
# environment variables with explanations.
#############################################################################
- name: Set up new Minecraft game
  hosts: localhost

  tasks:
    - set_fact:
        level_name: '{{ ansible_env.LEVEL_NAME }}'
        server_port: '{{ ansible_env.SERVER_PORT }}'
        data_path: '/opt/bedrock/{{ ansible_env.LEVEL_NAME }}'
        world_path: '/opt/bedrock/{{ ansible_env.LEVEL_NAME }}/worlds/{{ ansible_env.LEVEL_NAME }}'

    - name: remove old docker service
      docker_swarm_service:
        name: bedrock-{{ level_name }}
        state: absent

    - name: wait for service to stop
      wait_for:
        timeout: 5

    - name: check for world save
      stat:
        path: '{{ world_path }}/level.dat'
      become: yes
      register: world_save

    - name: check for world backup
      stat:
        path: '{{ data_path }}.mcworld'
      become: yes
      register: world_backup

    - name: backup world
      shell:
        cmd: '(cd {{ world_path }} && zip -r - *) > {{ level_name }}.mcworld'
      when: world_save.stat.exists and lookup("env", "SKIP_WORLD_BACKUP") != "true"

    - name: clear world data
      file:
        path: '{{ world_path }}/'
        state: absent
      become: yes
      when: lookup("env", "RESTORE_WORLD_BACKUP") == "true"

    - name: create directories
      file:
        path: '{{ item.path }}'
        group: teamcity
        mode: '{{ item.mode }}'
        state: directory
      become: yes
      loop:
        - { path: '/opt/bedrock', mode: g+ws }
        - { path: '/opt/bedrock/{{ level_name }}', mode: g+w }
        - { path: '/opt/bedrock/{{ level_name }}/worlds', mode: g+w }
        - { path: '{{ world_path }}', mode: g+ws }

    - name: restore world backup
      unarchive:
        src: '{{ data_path }}.mcworld'
        dest: '{{ world_path }}'
        owner: root
        group: teamcity
        mode: g+w
        remote_src: yes
      become: yes
      when: world_backup.stat.exists and (lookup("env", "RESTORE_WORLD_BACKUP") == "true" or not world_save.stat.exists)

    - name: write/update server.properties
      template:
        src: server.properties
        dest: /opt/bedrock/{{ level_name }}/server.properties
        owner: root
        group: teamcity
        mode: g+w
      become: yes

    - name: start new docker service
      docker_swarm_service:
        name: bedrock-{{ level_name }}
        image: bedrock-server
        tty: yes
        publish:
          - mode: ingress
            protocol: udp
            published_port: '{{ server_port }}'
            target_port: '{{ server_port }}'
        mounts:
          - target: '/bedrock-server/docker'
            source: '{{ data_path }}'
            type: bind
        replicas: 1
        state: present

      when: 'lookup("env", "SKIP_CONTAINER_RESTART") != "true"'
