server-name={{ ansible_facts.env.SERVER_NAME | default("Dedicated Server") }}
# Used as the server name
# Allowed values: Any string without semicolon symbol.

gamemode={{ ansible_facts.env.GAMEMODE | default("survival") }}
# Sets the game mode for new players.
# Allowed values: "survival", "creative", or "adventure"

force-gamemode={{ ansible_facts.env.FORCE_GAMEMODE | default("false") }}
# force-gamemode=false (or force-gamemode  is not defined in the server.properties)
# prevents the server from sending to the client gamemode values other
# than the gamemode value saved by the server during world creation
# even if those values are set in server.properties after world creation.
# 
# force-gamemode=true forces the server to send to the client gamemode values
# other than the gamemode value saved by the server during world creation
# if those values are set in server.properties after world creation.

difficulty={{ ansible_facts.env.DIFFICULTY | default("easy") }}
# Sets the difficulty of the world.
# Allowed values: "peaceful", "easy", "normal", or "hard"

allow-cheats={{ ansible_facts.env.ALLOW_CHEATS | default("false") }}
# If true then cheats like commands can be used.
# Allowed values: "true" or "false"

max-players={{ ansible_facts.env.MAX_PLAYERS | default("10") }}
# The maximum number of players that can play on the server.
# Allowed values: Any positive integer

online-mode={{ ansible_facts.env.ONLINE_MODE | default("true") }}
# If true then all connected players must be authenticated to Xbox Live.
# Clients connecting to remote (non-LAN) servers will always require Xbox Live authentication regardless of this setting.
# If the server accepts connections from the Internet, then it's highly recommended to enable online-mode.
# Allowed values: "true" or "false"

white-list={{ ansible_facts.env.WHITE_LIST | default("false") }}
# If true then all connected players must be listed in the separate whitelist.json file.
# Allowed values: "true" or "false"

server-port={{ ansible_facts.env.SERVER_PORT | default("19132") }}
# Which IPv4 port the server should listen to.
# Allowed values: Integers in the range [1, 65535]

server-portv6={{ ansible_facts.env.SERVER_PORTV6 | default("19133") }}
# Which IPv6 port the server should listen to.
# Allowed values: Integers in the range [1, 65535]

view-distance={{ ansible_facts.env.VIEW_DISTANCE | default("32") }}
# The maximum allowed view distance in number of chunks.
# Allowed values: Positive integer equal to 5 or greater.

tick-distance={{ ansible_facts.env.TICK_DISTANCE | default("4") }}
# The world will be ticked this many chunks away from any player.
# Allowed values: Integers in the range [4, 12]

player-idle-timeout={{ ansible_facts.env.PLAYER_IDLE_TIMEOUT | default("30") }}
# After a player has idled for this many minutes they will be kicked. If set to 0 then players can idle indefinitely.
# Allowed values: Any non-negative integer.

max-threads={{ ansible_facts.env.MAX_THREADS | default("8") }}
# Maximum number of threads the server will try to use. If set to 0 or removed then it will use as many as possible.
# Allowed values: Any positive integer.

level-name={{ ansible_facts.env.LEVEL_NAME | default("bedrock-level") }}
# Allowed values: Any string without semicolon symbol or symbols illegal for file name: /\n\r\t\f`?*\\<>|\":

level-seed={{ ansible_facts.env.LEVEL_SEED | default("") }}
# Use to randomize the world
# Allowed values: Any string

default-player-permission-level={{ ansible_facts.env.DEFAULT_PLAYER_PERMISSION_LEVEL | default("member") }}
# Permission level for new players joining for the first time.
# Allowed values: "visitor", "member", "operator"

texturepack-required={{ ansible_facts.env.TEXTUREPACK_REQUIRED | default("false") }}
# Force clients to use texture packs in the current world
# Allowed values: "true" or "false"

content-log-file-enabled={{ ansible_facts.env.CONTENT_LOG_FILE_ENABLED | default("false") }}
# Enables logging content errors to a file
# Allowed values: "true" or "false"

compression-threshold={{ ansible_facts.env.COMPRESSION_THRESHOLD | default("1") }}
# Determines the smallest size of raw network payload to compress
# Allowed values: 0-65535

server-authoritative-movement={{ ansible_facts.env.SERVER_AUTHORITATIVE_MOVEMENT | default("server-auth") }}
# Allowed values: "client-auth", "server-auth", "server-auth-with-rewind"
# Enables server authoritative movement. If "server-auth", the server will replay local user input on
# the server and send down corrections when the client's position doesn't match the server's.
# If "server-auth-with-rewind" is enabled and the server sends a correction, the clients will be instructed
# to rewind time back to the correction time, apply the correction, then replay all the player's inputs since then. This results in smoother and more frequent corrections.
# Corrections will only happen if correct-player-movement is set to true.

player-movement-score-threshold={{ ansible_facts.env.PLAYER_MOVEMENT_SCORE_THRESHOLD | default("20") }}
# The number of incongruent time intervals needed before abnormal behavior is reported.
# Disabled by server-authoritative-movement.

player-movement-distance-threshold={{ ansible_facts.env.PLAYER_MOVEMENT_DISTANCE_THRESHOLD | default("0.3") }}
# The difference between server and client positions that needs to be exceeded before abnormal behavior is detected.
# Disabled by server-authoritative-movement.

player-movement-duration-threshold-in-ms={{ ansible_facts.env.PLAYER_MOVEMENT_DURATION_THRESHOLD_IN_MS | default("500") }}
# The duration of time the server and client positions can be out of sync (as defined by player-movement-distance-threshold)
# before the abnormal movement score is incremented. This value is defined in milliseconds.
# Disabled by server-authoritative-movement.

correct-player-movement={{ ansible_facts.env.CORRECT_PLAYER_MOVEMENT | default("false") }}
# If true, the client position will get corrected to the server position if the movement score exceeds the threshold.


server-authoritative-block-breaking={{ ansible_facts.env.SERVER_AUTHORITATIVE_BLOCK_BREAKING | default("false") }}
# If true, the server will compute block mining operations in sync with the client so it can verify that the client should be able to break blocks when it thinks it can.